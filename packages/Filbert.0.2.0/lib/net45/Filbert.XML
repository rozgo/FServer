<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Filbert</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Filbert.Core.Bert.FromDict(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Filbert.Core.Bert,Filbert.Core.Bert}})">
<summary>
 Creates a new Dictionary
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Filbert.Core.Exceptions">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Filbert.Core.Constants">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Filbert.Core.Tags">

</member>
<member name="M:Filbert.Decoder.decode(System.IO.Stream)">
<summary>
 Decodes the stream into a BERT
</summary>
</member>
<member name="T:Filbert.Decoder">

</member>
<member name="M:Filbert.Encoder.encode(Filbert.Core.Bert,System.IO.Stream)">
<summary>
 Encodes the given BERT into the output stream
</summary>
</member>
<member name="M:Filbert.Encoder.getBigEndianBytesInt(System.Int32)">
<summary>
 Converts a signed 32-bit integer into a byte array
</summary>
</member>
<member name="T:Filbert.Encoder">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Filbert.Rpc.BertRpcClient.Start(System.String,System.Int32)">
<summary>
 Static helper method to start a BERT rpc client
</summary>
</member>
<member name="M:Filbert.Rpc.BertRpcClient.CastAsTask(System.String,System.String,Filbert.Core.Bert[])">
<summary>
 Makes an asynchronous request (fire-and-forget) and returns a Task&lt;unit&gt;
</summary>
</member>
<member name="M:Filbert.Rpc.BertRpcClient.Cast(System.String,System.String,Filbert.Core.Bert[])">
<summary>
 Makes an asynchronous request (fire-and-forget), this is mapped to a BERT tuple
 of the form:
     { cast, modName, funName, arg }
 e.g. { cast, nat, die, [ 666 ] }
</summary>
</member>
<member name="M:Filbert.Rpc.BertRpcClient.CallAsTask(System.String,System.String,Filbert.Core.Bert[])">
<summary>
 Makes a synchronous request and returns the response as a Task&lt;Bert&gt;
</summary>
</member>
<member name="M:Filbert.Rpc.BertRpcClient.Call(System.String,System.String,Filbert.Core.Bert[])">
<summary>
 Makes a synchronous request, this is mapped to a BERT tuple of the form:
     { call, modName, funName, arg }
 e.g. { call, nat, add, [1, 2] }
 Successful responses will be in the format of a BERT tuple { reply, Result }
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Filbert.Utils">

</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
